exports[`NodeList component renders ok 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Droppable
    acceptsDraggableType={null}
    droppableName={null}
    network={
        Object {
            "nodes": Array [
              Object {
                "name": "test",
              },
            ],
          }
    }
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    updateZone={[Function]} />,
  "nodes": Array [
    <Droppable
      acceptsDraggableType={null}
      droppableName={null}
      network={
            Object {
                "nodes": Array [
                  Object {
                    "name": "test",
                  },
                ],
              }
        }
        store={
            Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              }
        } />
</div>,
  "nodes": Array [
    <div
      className="scrollable">
      <Connect(Droppable)
            network={
                  Object {
                        "nodes": Array [
                          Object {
                            "name": "test",
                          },
                        ],
                      }
            }
            store={
                  Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
            } />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Scrollable
        network={
                Object {
                        "nodes": Array [
                          Object {
                            "name": "test",
                          },
                        ],
                      }
        }
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "network": Object {
            "nodes": Array [
              Object {
                "name": "test",
              },
            ],
          },
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "refs": Object {},
<<<<<<< HEAD
        "state": null,
=======
        "renderedElement": <Droppable
          acceptsDraggableType={null}
          droppableName={null}
          network={
                    Object {
                              "nodes": Array [
                                Object {
                                  "name": "test",
                                },
                              ],
                            }
          }
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
          updateZone={[Function]} />,
        "state": Object {
          "storeState": undefined,
        },
        "stateProps": Object {},
        "statePropsPrecalculationError": null,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
>>>>>>> update snapshots
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
<<<<<<< HEAD
        "_currentElement": <div
          className="scrollable">
          <Connect(Droppable)
                    network={
                              Object {
                                        "nodes": Array [
                                          Object {
                                            "name": "test",
                                          },
                                        ],
                                      }
                    }
                    store={
                              Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      }
                    } />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="scrollable">
          <Connect(Droppable)
                    network={
                              Object {
                                        "nodes": Array [
                                          Object {
                                            "name": "test",
                                          },
                                        ],
                                      }
                    }
                    store={
                              Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      }
                    } />
</div>,
=======
        "_currentElement": <Droppable
          acceptsDraggableType={null}
          droppableName={null}
          network={
                    Object {
                              "nodes": Array [
                                Object {
                                  "name": "test",
                                },
                              ],
                            }
          }
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
          updateZone={[Function]} />,
        "_debugID": 2,
        "_renderedOutput": <Droppable
          acceptsDraggableType={null}
          droppableName={null}
          network={
                    Object {
                              "nodes": Array [
                                Object {
                                  "name": "test",
                                },
                              ],
                            }
          }
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
          updateZone={[Function]} />,
>>>>>>> update snapshots
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Scrollable
    network={
        Object {
            "nodes": Array [
              Object {
                "name": "test",
              },
            ],
          }
    }
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    } />,
}
`;
